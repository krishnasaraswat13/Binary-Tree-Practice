//Binary Tree Paths Q-257 LC

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
         if(root==null){
            return new ArrayList<String>();
        }  
        String ans=Integer.toString(root.val);                       
        ArrayList<String> arr=new ArrayList<>();
        helper(root,ans,arr);
        return arr;
        
    }
    public void helper(TreeNode root,String ans,ArrayList<String> arr){
       
        
        if(root.left!=null){
            helper(root.left,ans+"->"+root.left.val,arr);
        }
        if(root.right!=null){
            helper(root.right,ans+"->"+root.right.val,arr);
        }
        if(root.left==null && root.right==null){
            arr.add(ans);
            return;
        }
    }
}

//Root to leaf Paths gfg
class Solution {
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        // code here
        if(root==null){
            return new ArrayList<ArrayList<Integer>>();
        }  
        ArrayList<Integer> ans=new ArrayList<>(); 
        ans.add(root.data);
        ArrayList<ArrayList<Integer>> arr=new ArrayList<>();
        helper(root,ans,arr);
        return arr;
        
    }
    public static void helper(Node root,ArrayList<Integer> ans,ArrayList<ArrayList<Integer>> arr){
       
        
        if(root.left!=null){
            ans.add(root.left.data);
            helper(root.left,ans,arr);
           ans.remove(ans.size() - 1);
        }
        if(root.right!=null){
            ans.add(root.right.data);
            helper(root.right,ans,arr);
            ans.remove(ans.size() - 1);
        }
        if(root.left==null && root.right==null){
           arr.add(new ArrayList<>(ans));
            return;
        }
    
    }
}