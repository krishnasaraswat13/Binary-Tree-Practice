/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    void leftadd(Node node,ArrayList<Integer> ans){
        Node curr=node.left;
        while(curr!=null){
            if(!isLeaf(curr)){
                ans.add(curr.data);
            }
            if(curr.left!=null){
                curr=curr.left;
            }
            else{
                curr=curr.right;
            }
        }
    }
    void rightadd(Node node,ArrayList<Integer> ans){
        Node curr=node.right;
        ArrayList<Integer> temp=new ArrayList<>();
        
        while(curr!=null){
            if(!isLeaf(curr)){
                temp.add(curr.data);
            }
            if(curr.right!=null){
                curr=curr.right;
            }
            else{
                curr=curr.left;
            }
        }
        for(int i=temp.size()-1;i>=0;i--){
            ans.add(temp.get(i));
        }
    }
    void leafadd(Node node,ArrayList<Integer> ans){
        if(isLeaf(node)){
            ans.add(node.data);
            return;
        }
        if(node.left!=null){
            leafadd(node.left,ans);
        }
        if(node.right!=null){
            leafadd(node.right,ans);
        }
    }
    boolean isLeaf(Node node){
        return node.left==null && node.right==null;
    }
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
       
        ArrayList<Integer> ans=new ArrayList<>();
         if(node==null){
            return ans;
        }
        if(!isLeaf(node)){
           ans.add(node.data); 
        }
        leftadd(node,ans);
        leafadd(node,ans);
        rightadd(node,ans);
        return ans;
    }
}